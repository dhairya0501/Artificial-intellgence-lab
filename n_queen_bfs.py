# -*- coding: utf-8 -*-
"""n-queen-bfs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TBBWdnl1m0kSYuDBFR7H2cJRSBCHlIiq
"""

class Node:
  def __init__(self,N):
    self.N=N
  def is_not_safe(self,board):
    for i in range(1,len(board)):
      x1,y1=board[i]
      for j in range(i):
        x2,y2=board[j]
        if (x1==x2 or y1==y2 or (abs(x2-x1)==abs(y1-y2))):
          return True
    return False
  def bfs(self):
    goal_states=[]
    start_state=[]
    Queue=[]
    Queue.append(start_state)
    while len(Queue)!=0:
       goal_state=Queue[0]
       del(Queue[0])
       if self.is_not_safe(goal_state):
         continue
       i = len(goal_state)
       if i == self.N:
         goal_states = goal_states + [goal_state]
         continue
       for j in range(self.N):
         board = (i,j)
         boards = goal_state.copy()
         boards = boards + [board]
         Queue = Queue + [boards]
    for goal_state in goal_states:
      for goal in goal_state:
          print('-'*goal[1]+'Q'+'-'*(self.N-goal[1]-1))
      print('\n')
N=int(input('Enter N '))
if(N==2 or N==3):
  print("No solution possible")
if(N==1):
  print('Q')
else:
  node=Node(N)
  node.bfs()