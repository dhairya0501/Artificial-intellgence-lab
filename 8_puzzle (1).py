# -*- coding: utf-8 -*-
"""8-puzzle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m60bsobKWYk7ycv_pTbHctGivfBOAJM8
"""

class Node:
  def __init__(self,state,depth,f_score):
    self.state=state
    self.depth=depth
    self.f_score=f_score
  def create_children(self):
    for i in range(len(self.state)):
      for j in range(len(self.state)):
        if self.state[i][j]=='0':
          x1,y1=i,j
    possible_positions=[(x1,y1-1),(x1,y1+1),(x1-1,y1),(x1+1,y1)]
    children=[]
    for place in possible_positions:
      if place[0]>=0 and place[0]<3 and place[1]>=0 and place[1]<3:
      #  temp = [[1,2,3],[1,2,3],[1,2,3]]
        temp=[]
        for i in range(3):
          temp=temp+[self.state[i].copy()]
        #print(temp)
        temp_val=temp[place[0]][place[1]]
        temp[place[0]][place[1]]=temp[x1][y1]
        temp[x1][y1]=temp_val
        temp_node=Node(temp,self.depth,0)
        children=children+[temp_node]
    return children        

class Puzzle:
  def __init__(self):
    self.open_list=[]
    self.closed_list=[]
  def f_score(self,start_state,goal_state):
    temp=self.h_score(start_state.state,goal_state)+start_state.depth
    return temp
  def h_score(self,start,goal): #manhattan distance
    temp = 0;
    for i in range(3):
      for j in range(3):
        if goal[i][j]!=start[i][j]:
          for p in range(3):
            for q in range(3):
              if goal[p][q]==start[i][j]:
                temp=temp+abs((i-p)+(j-q))
                break
    return temp


print("Enter the initial state")
start_state=[]
for i in range(3):
  row=input().split(" ")
  start_state=start_state+[row]
print("Enter the goal state")
goal_state=[]
for i in range(3):
  row=input().split(" ")
  goal_state=goal_state+[row]
print('\n')
puzzle=Puzzle()
start_state=Node(start_state,0,0)
start_state.f_score=puzzle.f_score(start_state,goal_state)
puzzle.open_list=puzzle.open_list+[start_state]
while True:
  current_state=puzzle.open_list[0]
  for i in current_state.state:
    for j in i:
      print(j,end=' ')
    print(' ')
  print('\n')
  if(puzzle.h_score(current_state.state,goal_state)==0):
    break
  for board in current_state.create_children():
    board.f_score=puzzle.f_score(board,goal_state)
    puzzle.open_list=puzzle.open_list+[board]
  puzzle.closed_list=puzzle.closed_list+[current_state]
  del(puzzle.open_list[0])
  puzzle.open_list.sort(key=lambda x:x.f_score,reverse=False)

