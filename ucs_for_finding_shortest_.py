# -*- coding: utf-8 -*-
"""UCS for finding shortest .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uV5nvnoKudCEgUTbIKEFLY9edAzJPggM
"""

def UCS(graph,start,goal):
  Queue=[start]
  min_dist={v:int("inf") for v in graph}
  min_dist[start]=0
  parent={}
  while len(Queue)!=0:
    current=Queue[0]
    del(Queue[0])
    for adj_ver in graph[current]:
      Dist=min_dist[current]+graph[current][adj_ver]
      if Dist<min_dist[adj_ver]:
        min_dist[adj_ver]=min(Dist,min_dist[adj_ver])
        Queue=Queue+[adj_ver]
        parent[adj_ver]=current
#min_dist, parent
  current=goal
  while current!=start : 
    current=parent[current]
  if goal in min_dist and min_dist[goal]!=float("inf"):
    print("Shortes Distance is"+min_dist[goal])

s=input("Enter the file address")
with open(s,"r") as File1:
  file_stuff = File1.readlines()
V=int(file_stuff[0])
E=int(file_stuff[1])
vertices=[] 
weighted_edges=[]
edge=[1,2,3]
for i in range(E):
  edge[0]=file_stuff[i+2][0]
  edge[1]=file_stuff[i+2][2]
  edge[2]=int(file_stuff[i+2][4])
  weighted_edges.append(edge)
print(weighted_edges)

from typing import DefaultDict
def Graph(edges):
  graph=DefaultDict(dict)
  for u,v,w in edges:
    graph[u][v]=w
  return graph
Graph=Graph(weighted_edges)
shortest_path,ancestor=Distance(Graph,)
V=Graph.keys()

u=input("enter source node")
v=input("enter the goal node")
UCS(Graph,u,v)